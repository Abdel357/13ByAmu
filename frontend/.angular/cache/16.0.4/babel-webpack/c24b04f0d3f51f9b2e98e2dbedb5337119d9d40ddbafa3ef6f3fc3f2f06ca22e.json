{"ast":null,"code":"import { environment } from \"src/environment/environment\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { first, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class ConnectionService {\n  checkConnectSidCookie() {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.url = environment.api_url + \"/login\";\n    this.isUserLoggedIn$ = new BehaviorSubject(this.checkConnectSidCookie());\n    this.urlLogOut = environment.api_url + \"/logout\";\n  }\n  login(connection) {\n    return this.http.post(this.url, connection, {\n      withCredentials: true\n    }).pipe(first(), tap(res => {\n      if (res.success && res.token) {\n        localStorage.setItem(\"token\", res.token);\n        this.isUserLoggedIn$.next(true);\n      }\n    }));\n  }\n  setSessionData(sessionData) {\n    sessionStorage.setItem(\"sessionData\", JSON.stringify(sessionData));\n  }\n  logout() {\n    this.http.post(this.urlLogOut, null, {\n      withCredentials: true\n    }).subscribe(() => {\n      this.router.navigate([\"/accueil\"]);\n    }, error => {\n      console.log(\"Logout error:\", error);\n    });\n    localStorage.removeItem(\"token\");\n    this.setSessionData(null);\n    this.isUserLoggedIn$.next(false);\n  }\n}\nConnectionService.ɵfac = function ConnectionService_Factory(t) {\n  return new (t || ConnectionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nConnectionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ConnectionService,\n  factory: ConnectionService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["environment","BehaviorSubject","first","tap","ConnectionService","checkConnectSidCookie","token","localStorage","getItem","constructor","http","router","url","api_url","isUserLoggedIn$","urlLogOut","login","connection","post","withCredentials","pipe","res","success","setItem","next","setSessionData","sessionData","sessionStorage","JSON","stringify","logout","subscribe","navigate","error","console","log","removeItem","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Youssef EL-HAMRANI\\Desktop\\Node js\\NEW PFE\\project_pfe-frontend\\frontend\\src\\app\\services\\connection.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"src/environment/environment\";\nimport { ConnectionModel } from \"../models/connection.model\";\nimport { Router } from \"@angular/router\";\nimport { Observable, BehaviorSubject } from \"rxjs\";\nimport { first, tap } from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ConnectionService {\n  url = environment.api_url + \"/login\";\n\n  isUserLoggedIn$ = new BehaviorSubject<boolean>(this.checkConnectSidCookie());\n\n  private checkConnectSidCookie(): boolean {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      return true;\n    }\n    return false;\n  }\n\n  constructor(private http: HttpClient, private router: Router) {}\n\n  login(connection: ConnectionModel): Observable<any> {\n    return this.http.post(this.url, connection, { withCredentials: true }).pipe(\n      first(),\n      tap((res: any) => {\n        if (res.success && res.token) {\n          localStorage.setItem(\"token\", res.token);\n          this.isUserLoggedIn$.next(true);\n        }\n      })\n    );\n  }\n\n  setSessionData(sessionData: any) {\n    sessionStorage.setItem(\"sessionData\", JSON.stringify(sessionData));\n  }\n\n  urlLogOut = environment.api_url + \"/logout\";\n\n  logout() {\n    this.http.post(this.urlLogOut, null, { withCredentials: true }).subscribe(\n      () => {\n        this.router.navigate([\"/accueil\"]);\n      },\n      (error) => {\n        console.log(\"Logout error:\", error);\n      }\n    );\n\n    localStorage.removeItem(\"token\");\n    this.setSessionData(null);\n    this.isUserLoggedIn$.next(false);\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,6BAA6B;AAGzD,SAAqBC,eAAe,QAAQ,MAAM;AAClD,SAASC,KAAK,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,iBAAiB;EAKpBC,qBAAqBA,CAAA;IAC3B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAG,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAZpD,KAAAC,GAAG,GAAGZ,WAAW,CAACa,OAAO,GAAG,QAAQ;IAEpC,KAAAC,eAAe,GAAG,IAAIb,eAAe,CAAU,IAAI,CAACI,qBAAqB,EAAE,CAAC;IA4B5E,KAAAU,SAAS,GAAGf,WAAW,CAACa,OAAO,GAAG,SAAS;EAlBoB;EAE/DG,KAAKA,CAACC,UAA2B;IAC/B,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACN,GAAG,EAAEK,UAAU,EAAE;MAAEE,eAAe,EAAE;IAAI,CAAE,CAAC,CAACC,IAAI,CACzElB,KAAK,EAAE,EACPC,GAAG,CAAEkB,GAAQ,IAAI;MACf,IAAIA,GAAG,CAACC,OAAO,IAAID,GAAG,CAACf,KAAK,EAAE;QAC5BC,YAAY,CAACgB,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACf,KAAK,CAAC;QACxC,IAAI,CAACQ,eAAe,CAACU,IAAI,CAAC,IAAI,CAAC;;IAEnC,CAAC,CAAC,CACH;EACH;EAEAC,cAAcA,CAACC,WAAgB;IAC7BC,cAAc,CAACJ,OAAO,CAAC,aAAa,EAAEK,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,CAAC;EACpE;EAIAI,MAAMA,CAAA;IACJ,IAAI,CAACpB,IAAI,CAACQ,IAAI,CAAC,IAAI,CAACH,SAAS,EAAE,IAAI,EAAE;MAAEI,eAAe,EAAE;IAAI,CAAE,CAAC,CAACY,SAAS,CACvE,MAAK;MACH,IAAI,CAACpB,MAAM,CAACqB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC,EACAC,KAAK,IAAI;MACRC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,KAAK,CAAC;IACrC,CAAC,CACF;IAED1B,YAAY,CAAC6B,UAAU,CAAC,OAAO,CAAC;IAChC,IAAI,CAACX,cAAc,CAAC,IAAI,CAAC;IACzB,IAAI,CAACX,eAAe,CAACU,IAAI,CAAC,KAAK,CAAC;EAClC;;AA9CWpB,iBAAiB,C;mBAAjBA,iBAAiB,EAAAiC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAjBtC,iBAAiB,C;SAAjBA,iBAAiB;EAAAuC,OAAA,EAAjBvC,iBAAiB,CAAAwC,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}