{"ast":null,"code":"import { environment } from \"src/environment/environment\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EvaluationService {\n  constructor(http) {\n    this.http = http;\n    this.url = environment.api_url + \"/reservation/evaluation/:idTerrain\";\n  }\n  evaluate(evaluate) {\n    const sessionData = JSON.parse(sessionStorage.getItem(\"sessionData\") || \"{}\");\n    if (sessionData && sessionData.idUser) {\n      evaluate.idUser = sessionData.idUser;\n      console.log(evaluate);\n      return this.http.post(this.url, evaluate);\n    } else {\n      return throwError(\"Session not found\");\n    }\n  }\n}\nEvaluationService.ɵfac = function EvaluationService_Factory(t) {\n  return new (t || EvaluationService)(i0.ɵɵinject(i1.HttpClient));\n};\nEvaluationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EvaluationService,\n  factory: EvaluationService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["environment","throwError","EvaluationService","constructor","http","url","api_url","evaluate","sessionData","JSON","parse","sessionStorage","getItem","idUser","console","log","post","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Youssef EL-HAMRANI\\Desktop\\Node js\\NEW PFE\\project_pfe-frontend\\frontend\\src\\app\\services\\evaluation.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"src/environment/environment\";\nimport { EvaluationModel } from \"../models/evaluation.model\";\nimport { Observable } from \"rxjs\";\nimport { throwError } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class EvaluationService {\n  url = environment.api_url + \"/reservation/evaluation/:idTerrain\";\n\n  constructor(private http: HttpClient) {}\n\n  evaluate(evaluate: EvaluationModel): Observable<any> {\n    const sessionData = JSON.parse(\n      sessionStorage.getItem(\"sessionData\") || \"{}\"\n    );\n    if (sessionData && sessionData.idUser) {\n      evaluate.idUser = sessionData.idUser;\n      console.log(evaluate);\n      return this.http.post(this.url, evaluate);\n    } else {\n      return throwError(\"Session not found\");\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,6BAA6B;AAGzD,SAASC,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,GAAG,GAAGL,WAAW,CAACM,OAAO,GAAG,oCAAoC;EAEzB;EAEvCC,QAAQA,CAACA,QAAyB;IAChC,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC5BC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAC9C;IACD,IAAIJ,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;MACrCN,QAAQ,CAACM,MAAM,GAAGL,WAAW,CAACK,MAAM;MACpCC,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;MACrB,OAAO,IAAI,CAACH,IAAI,CAACY,IAAI,CAAC,IAAI,CAACX,GAAG,EAAEE,QAAQ,CAAC;KAC1C,MAAM;MACL,OAAON,UAAU,CAAC,mBAAmB,CAAC;;EAE1C;;AAhBWC,iBAAiB,C;mBAAjBA,iBAAiB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAjBlB,iBAAiB,C;SAAjBA,iBAAiB;EAAAmB,OAAA,EAAjBnB,iBAAiB,CAAAoB,IAAA;EAAAC,UAAA,EAFhB;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}