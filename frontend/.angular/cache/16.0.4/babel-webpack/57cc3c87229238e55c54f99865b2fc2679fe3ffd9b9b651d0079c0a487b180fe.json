{"ast":null,"code":"import { environment } from \"src/environment/environment\";\nimport { throwError } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProfileService {\n  constructor(http) {\n    this.http = http;\n    this.url = environment.api_url + \"/edit_profile\";\n  }\n  editProfile(profile) {\n    const sessionData = JSON.parse(sessionStorage.getItem(\"sessionData\") || \"{}\");\n    if (sessionData && sessionData.idUser) {\n      profile.idUser = sessionData.idUser;\n      return this.http.post(this.url, profile);\n    } else {\n      return throwError(\"Can't reach the server\");\n    }\n  }\n  getUserProfile() {\n    const sessionData = JSON.parse(sessionStorage.getItem(\"sessionData\") || \"{}\");\n    if (sessionData && sessionData.idUser) {\n      const options = {\n        params: {\n          idUser: sessionData.idUser\n        }\n      };\n      return this.http.get(this.url, options);\n    } else {\n      return throwError(\"Session not found\");\n    }\n  }\n}\nProfileService.ɵfac = function ProfileService_Factory(t) {\n  return new (t || ProfileService)(i0.ɵɵinject(i1.HttpClient));\n};\nProfileService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProfileService,\n  factory: ProfileService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"names":["environment","throwError","ProfileService","constructor","http","url","api_url","editProfile","profile","sessionData","JSON","parse","sessionStorage","getItem","idUser","post","getUserProfile","options","params","get","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Youssef EL-HAMRANI\\Desktop\\Node js\\NEW PFE\\project_pfe-frontend\\frontend\\src\\app\\services\\profile.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"src/environment/environment\";\nimport { ProfileModel } from \"../models/profile.model\";\nimport { Observable } from \"rxjs\";\nimport { throwError } from \"rxjs\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ProfileService {\n  url = environment.api_url + \"/edit_profile\";\n\n  constructor(private http: HttpClient) {}\n\n  editProfile(profile: ProfileModel): Observable<any> {\n    const sessionData = JSON.parse(\n      sessionStorage.getItem(\"sessionData\") || \"{}\"\n    );\n    if (sessionData && sessionData.idUser) {\n      profile.idUser = sessionData.idUser;\n      return this.http.post(this.url, profile);\n    } else {\n      return throwError(\"Can't reach the server\");\n    }\n  }\n\n  getUserProfile(): Observable<ProfileModel> {\n    const sessionData = JSON.parse(\n      sessionStorage.getItem(\"sessionData\") || \"{}\"\n    );\n    if (sessionData && sessionData.idUser) {\n      const options = { params: { idUser: sessionData.idUser } };\n      return this.http.get<ProfileModel>(this.url, options);\n    } else {\n      return throwError(\"Session not found\");\n    }\n  }\n}\n"],"mappings":"AAEA,SAASA,WAAW,QAAQ,6BAA6B;AAGzD,SAASC,UAAU,QAAQ,MAAM;;;AAKjC,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFxB,KAAAC,GAAG,GAAGL,WAAW,CAACM,OAAO,GAAG,eAAe;EAEJ;EAEvCC,WAAWA,CAACC,OAAqB;IAC/B,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC5BC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAC9C;IACD,IAAIJ,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;MACrCN,OAAO,CAACM,MAAM,GAAGL,WAAW,CAACK,MAAM;MACnC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAC,IAAI,CAACV,GAAG,EAAEG,OAAO,CAAC;KACzC,MAAM;MACL,OAAOP,UAAU,CAAC,wBAAwB,CAAC;;EAE/C;EAEAe,cAAcA,CAAA;IACZ,MAAMP,WAAW,GAAGC,IAAI,CAACC,KAAK,CAC5BC,cAAc,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI,CAC9C;IACD,IAAIJ,WAAW,IAAIA,WAAW,CAACK,MAAM,EAAE;MACrC,MAAMG,OAAO,GAAG;QAAEC,MAAM,EAAE;UAAEJ,MAAM,EAAEL,WAAW,CAACK;QAAM;MAAE,CAAE;MAC1D,OAAO,IAAI,CAACV,IAAI,CAACe,GAAG,CAAe,IAAI,CAACd,GAAG,EAAEY,OAAO,CAAC;KACtD,MAAM;MACL,OAAOhB,UAAU,CAAC,mBAAmB,CAAC;;EAE1C;;AA3BWC,cAAc,C;mBAAdA,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAdrB,cAAc,C;SAAdA,cAAc;EAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}